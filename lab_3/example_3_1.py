# Подобно тому, как дом складывается из кирпичиков, современные программы складываются из функций
# И чтобы начать программировать по-настоящему, мы должны научиться их писать

# __________________ объявление функций __________________

# Объявление функции начинается с ключевого слова def, далее идет название функции, аргументы в скобках и двоеточие
# И под объявлением функции находится ее тело.
# Если аргументов (принимаемых значений) в функции нет, то скобки остаются пустыми
def function_name(first_argument, second_argument):
    print(first_argument, second_argument)


# ТАК ПОДОЖДИТЕ! Что такое функция? Что за аргументы? Какое тело? Что опять за отступы вообще после двоеточий?

# Функция в python - объект, принимающий аргументы и возвращающий значение.
# Это как будто бы ящик с кнопкой, который выполняет какие-либо действия, либо расчёты по ее нажатию
# Для его работы, нужно положить в него столько объектов или примитивов, сколько аргументов она принимает
# Заставляя функцию поработать, вы запускаете все механизмы, описанные внутри нее, от начала и до конца
# После выполнения всех своих внутренних действий, этот ящик еще и вернёт вам какое-то значение.
# Если вы ничего не возвращаете из функции с помощью инструкции return, то она вернёт вам None (ничего)
# Вы можете как записать результат работы функции в какую-либо переменную, так и не записывать его никуда

# Аргументы - это входные значения функции, как, например, математические аргументы математических же функций.

# Телом функции я называю все, что находится внутри неё. (Как это называется по-научному я не знаю)
# Что находится внутри чего-то, а что нет, в python определяется отступами
# Один уровень вложенности в python равен 4 пробелам
# Когда вы оступаете на 4 пробела перед строкой кода, вы помещаете ее внутрь вышестоящей конструкции

def test_function():
    print('Я внутри функции')
    if True:
        print('А я внутри if, который внутри функции')
    print('Я внутри функции, но уже не внутри if, ведь я вернулся на 4 пробела назад')


print('Я нахожусь снаружи функции, выполняюсь сам по себе без вызова test_function(), ведь я стою вровень с функцией')
test_function()


# Если хотите вернуть что-либо из функции, то используйте инструкцию return
def returning_function(argument):
    return 'argument: ' + str(argument)


# str() - функция преобразующая переданное в нее значение в строку.
# Зачем она тут? В питоне строки можно складывать только со строками, вот зачем.
# В функцию же можно передавать не только строки. Вдруг мы захотим передать число...
# Пытаясь сложить число со строкой мы получим ошибку, а преобразовывая значение в строку мы избегаем ошибки.


# __________________ использование функций __________________
# Ну вот мы объявили уже 2 функции, но как их использовать?
# Все очень просто - напишите имя функции и заставьте ее поработать (нажмите на кнопку ящика) с помощью скобочек в конце
# Если в функцию надо передать аргументы, то поместите их в эти самые скобочки

# Давайте вызовем самую первую из объявленных функций
print('Функция, принимающая аргументы:')
function_name('Первый аргумент', 'Второй аргумент')

# Также давайте функцию, которая возвращает значение
print('Функция, возвращающая результат:')
returned_value = returning_function('Результат работы этой функции будет записан в переменную returned_value')
# Выведем returned_value на экран
print(returned_value)

# Если попытаться вывести на экран результат работы функции, которая ничего не возвращает, то результат будет очевиден
print('Функция, не возвращающая результат:')


def no_return(arg):
    arg = str(arg) + ' хвост'


print(no_return('Я выведу на экран None'))


# Почему None? Потому что в этой функции нет инструкции return.

def another_test_function():
    return 'Я еще одна тестовая функция'


# Функция в python - это тоже объект.
# Поэтому если вы выполните строчку ниже, то на экран будет выведена информация о самой функции (ее имя, адрес в памяти)

print('Выводим информацию об объекте функции:')
print(another_test_function)
# А если вы попытаетесь выполнить следующую строку, то на экране окажется уже результат работы функции
print('Выводим результат работы функции:')
print(another_test_function())

# Запомните! Чтобы заставить функцию поработать, нужно обязательно указать после ее имени скобочки.
# Если в функцию нужно передать аргументы, то нужно передать их внутрь этих самых скобочек.

# Если вы читали весь материал внимательно, то могли заметить, что можно положить функцию в переменную, а затем вызвать
func_var = another_test_function
print(func_var())
# Несмотря на то, что мы можем так поступить, ради чистоты кода мы так не делаем

# Погуглите про чистоту кода, чтобы иметь общее представление об этом
