# Дисклеймер. если запустить этот файл, то будет создан файл example_3_3.txt
# Но так и надо, не пугайтесь.

# __________________ работа с файлами __________________
# функция open() умеет открывать файлы, и она возвращает нам по результату выполнения "объект потока".
# Бывают потоки на чтение и на запись.
# А еще потоки нужно обязательно закрывать после их использования!
# Давайте прочитаем первую строчку нашего readme-файла:

read_stream = open('Readme.MD', 'r')
first_line = read_stream.readline()
read_stream.close()
print('Первая строка ридми-файла:')
print(first_line)

# А теперь давайте все тоже самое, только с объяснениями
# Мы создаём переменную read_stream, и кладём в нее объект для работы с потоком чтения из файла 'Readme.MD'
# 'r' - это режим, в котором мы открываем файл. Режим "r" - это чтение (read)
read_stream = open('Readme.MD', 'r')

# Мы создаём переменную first_line, и кладём в нее строку, которую мы получили из потока с помощью функции readline()
first_line = read_stream.readline()

# Закрываем поток
read_stream.close()

# ну тут мы уже знаем, что у нас было написано в Readme-файле
print('Первая строка ридми-файла:')
print(first_line)


# Можно открывать потоки не только на чтение, но и, например, на перезапись файла, или добавление в конец файла.
# Давайте откроем ниже поток на добавление строчки в конец файла

# Создаём переменную write_stream, и кладём в нее объект для работы с потоком записи в конец файла 'example_2_2.txt'
write_stream = open('example_3_3.txt', 'a')
# Записываем в файл строку 'Я строка, которую добавляют в конец!\n'.
# Символ \n - это перенос на новую строку (типа new line), без него все будет склеено в одну строчку
write_stream.write('Я строка, которую добавляют в конец!' + '\n')
# ну тут мы уже знаем, что у нас происходит (закрываем поток)
write_stream.close()

# Сколько раз вы запустите эту программу, столько же строчек появится в файле example_2_2.txt
# Если до первого запуска у вас не было этого файла, то питон его создаст


# __________________ послесловие __________________
# Вообще правильно открывать файлы и читать из них (а также писать) с помощью менеджера контекстов with ... as
# Потому что в конце своей работы конструкция with ... as закрывает поток автоматически
# Она самостоятельно вызывает функцию __exit__() объекта потока, закрывающую его

print('прочитаем файл example_3_3.txt:')
with open("example_3_3.txt", "r") as file:
    # итерация по строкам
    for line in file:
        print(line.strip())

# Но для того, чтобы объяснить что это за __exit__() внутри объекта потока, надо объяснить вам классы
# Поэтому пока что просто запомните, работать с файлами надо через конструкцию with ... as
# Потому что она в любом случае закроет поток (даже в случае ошибки)

# Функция strip() удаляет из начала и конца строки символы
# По дефолту (без аргументов) она удаляет лишние пробелы и переносы строк
# Тут она нужна, чтобы удалить символ переноса строки из конца строчек в файле "example_3_3.txt" (\n - перенос строки)